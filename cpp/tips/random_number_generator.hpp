/* -------------------------------------------------------------------------------
	擬似乱数生成機
	使用アルゴリズムはポリシーで渡します
---------------------------------------------------------------------------------*/

#ifndef HPP_RANDOM_NUMBER_GENERATOR_INCLUDED
#define HPP_RANDOM_NUMBER_GENERATOR_INCLUDED


namespace nd {

// =================================================================
//	擬似乱数取得インターフェース
//	内部実装はテンプレートで指定します
template<class RandAlgorithm>
class RandomNumberGenerator
{
// -----------------------------------------------------------------
//	コンストラクタ・デストラクタ
public:
	// *************************************************************************
	//	コンストラクタ
	explicit RandomNumberGenerator(
		const unsigned long seed
		)
		: algorithm_( seed )
		{
		// none
	}
	
	// *************************************************************************
	//	デストラクタ
	~RandomNumberGenerator()
	{
		// none
	}
	

// -----------------------------------------------------------------
//	公開メソッド
public:
	// *************************************************************************
	//	符号無し32bit整数の乱数取得
	unsigned long getU32()
	{
		return ( algorithm_.getU32() );
	}
	
	// *************************************************************************
	//	符号無し32bit整数の乱数取得　上限付き
	unsigned long getU32(
		const unsigned long limit	// I : 上限値
		){
	
		return ( algorithm_.getU32() % limit );	
	}

	// *************************************************************************
	//	32bit整数の乱数取得
	int getInt()
	{
		return ( static_cast<int>( algorithm_.getU32() ) );
	}

	// *************************************************************************
	//	32bit整数の乱数取得　上限付き
	int getInt(
		const int limit			// I : 上限値
		){
		return ( getInt() % limit );
	}
	
	// *************************************************************************
	//	bool乱数取得
	bool getBool()
	{
		//	アルゴリズムによっては最下位ビットは規則性がある場合があるので
		//	2bit目を採用
		return ( ( algorithm_.getU32() & 2 ) == 0 );
	}
	
	// *************************************************************************
	//	float乱数取得  0 < val < 1.0 の範囲の乱数取得
	float getFloat()
	{
		return ( static_cast<float>( getU32(65535) ) / 65536.0f );
	}
	

// -----------------------------------------------------------------
//	メンバ変数
private:
	RandAlgorithm algorithm_;	// 乱数生成アルゴリズム

};


} // namespace nd

#endif // HPP_RANDOM_NUMBER_GENERATOR_INCLUDED
