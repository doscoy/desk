/* -------------------------------------------------------------------------------
	生のポインタをコピー不可能なポインタとして装飾します。
	オブジェクトは scoped_ptr のデストラクト時か明示的な reset によって削除されます。
	NonCopyable であり、コピーされるべきでないポインタに対して cs::shared_ptr や std::auto_ptr よりも安全です。
	std::auto_ptrと同様に標準コンテナの要素としては使用できません。
---------------------------------------------------------------------------------*/

#ifndef HPP_SCOPED_PTR_INCLUDED
#define HPP_SCOPED_PTR_INCLUDED

// -----------------------------------------------------------------
//	インクルード
#include <algorithm>	// for std::swap
#include <cassert>		// for assert
#include <new>			// for new/delete


namespace nd {


// =================================================================
//	コピー不可スマートポインタ
template<class T>
class scoped_ptr
{
// -----------------------------------------------------------------
//	公開型定義
	typedef T element_type;

// -----------------------------------------------------------------
//	クラス内型
private:
	typedef scoped_ptr<T> this_type;


// -----------------------------------------------------------------
//	コンストラクタ・デストラクタ
public:

	// *************************************************************************
	//	コンストラクタ
	explicit scoped_ptr( T* p = NULL )
		: ptr_( p ) 
		{}

	// *************************************************************************
	//	デストラクタ
	~scoped_ptr() {
		if ( ptr_ ){
			delete ptr_;
			ptr_ = NULL;
		}
	}

// -----------------------------------------------------------------
//	コピー禁止ポリシー
private:
	scoped_ptr( const scoped_ptr& );					// コピーコンストラクタ
	scoped_ptr& operator = ( const scoped_ptr& );		// 代入オペレータ
	//	同じものが存在しないので判定オペレータも無効化
    void operator==( scoped_ptr const& ) const;
    void operator!=( scoped_ptr const& ) const;

// -----------------------------------------------------------------
//	公開メソッド
public:
	// *************************************************************************
	//	リセット
	void reset( T* p = NULL ) {
		assert( p == 0 || p != ptr_ );
		this_type( p ).swap( *this );
	}

	// *************************************************************************
	//	生ポインタを取得
	T* get() const {
		return ( ptr_ );
	}

	// *************************************************************************
	//	交換
	void swap( scoped_ptr& b ) {
		std::swap( ptr_, b.ptr_ );
	}

// -----------------------------------------------------------------
//	オペレータ
public:
	// *************************************************************************
	//	参照演算子
	T& operator *() const {
		assert( ptr_ );
		return ( *ptr_ ); 
	}

	// *************************************************************************
	//	ポインタ演算子
	T* operator->() const {
		assert( ptr_ );
		return ( ptr_ );
	}
	
	// *************************************************************************
	//	bool演算子
	operator bool () const {
		return ( ptr_ != 0 );
	}
	bool operator! () const {
		return ( ptr_ == 0 );
	}


// -----------------------------------------------------------------
//	メンバ変数
private:
	T* ptr_;
};



} // namespace nd

#endif // HPP_SCOPED_PTR_INCLUDED
