/* -------------------------------------------------------------------------------
	shared_ptrの補助スマートポインタ。
---------------------------------------------------------------------------------*/

#ifndef HPP_WEAK_PTR_INCLUDED
#define HPP_WEAK_PTR_INCLUDED


// -----------------------------------------------------------------
//	インクルード
#include "shared_ptr.hpp"



namespace nd {

// -----------------------------------------------------------------
//	クラス前方宣言
template <class T> class shared_ptr;


// =================================================================
//	shared_ptr補助スマートポインタ
template <class T>
class weak_ptr
{
// -----------------------------------------------------------------
//	公開型定義
public:
	typedef T element_type;

// -----------------------------------------------------------------
//	クラス内型
private:
	typedef weak_ptr<T> this_type;


// -----------------------------------------------------------------
//	コンストラクタ・デストラクタ
public:

	// *************************************************************************
	//	デフォルトコンストラクタ
	weak_ptr()
		: px_(0)
		, pn_(0) 
		{}

	// *************************************************************************
	//	コピーコンストラクタ
	weak_ptr(
		const weak_ptr<T>& r 
		)
		: pn_( r.pn_ ) 
		{
		
		px_ = r.lock().get();
	}

	// *************************************************************************
	// shared_ptrから作成するコンストラクタ
	weak_ptr( 
		const shared_ptr<T>& r 
		)
		: px_( r.px_ )
		, pn_( r.pn_ ) 
		{}


// -----------------------------------------------------------------
//	オペレータ
public:

	// *************************************************************************
	//	コピー
	weak_ptr& operator =( 
		const weak_ptr<T>& r 
		) {
		px_ = r.lock().get();
		pn_ = r.pn_;
		
		return ( *this );
	}

	// *************************************************************************
	//	shared_ptrからコピー
	weak_ptr& operator =(
		const shared_ptr<T>& r
		) {
		px_ = r.px_;
		pn_ = r.pn_;
		return ( *this );
	}


// -----------------------------------------------------------------
//	公開メソッド
public:

	// *************************************************************************
	//	shared_ptrを取得
	shared_ptr<T> lock() const {
		return ( isExpired() ? shared_ptr<element_type>( NULL ) : shared_ptr<element_type>( *this ) );
	}


	// *************************************************************************
	//	参照カウント取得
	int useCount() const {
		return ( pn_ ? *pn_ : 0 );
	}
		
	// *************************************************************************
	//	所有権を共有しているshared_ptrがあるか判定
	bool isExpired() const {		
		return ( useCount() == 0 );
	}

	// *************************************************************************
	//	リセット	
	void reset() {
		this_type().swap( *this );
	}

	// *************************************************************************
	//	交換
	void swap(
		this_type& other
		) {
		std::swap( px_, other.px_ );
		std::swap( pn_, other.pn_ );
	}

	// *************************************************************************
	//	< 比較関数
	bool _internal_less(
		const weak_ptr<T>& rhs
		) const {
		return ( pn_ < rhs.pn_ );
	}

// -----------------------------------------------------------------
//	メンバ変数
private:
	template<class Y> friend class weak_ptr;
    template<class Y> friend class shared_ptr;

	T* px_;
	int* pn_;
};


// *************************************************************************
//	比較オペレータ <
template <class T>
inline bool operator <(const weak_ptr<T>& a, const weak_ptr<T>& b) {
	return a._internal_less(b);
}


} // nd

#endif // HPP_WEAK_PTR_INCLUDED
